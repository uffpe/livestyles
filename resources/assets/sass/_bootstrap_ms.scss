// Bootstrap Mid-Small - col-ms-* - the missing grid set for Bootstrap3.
//
// This is a hack to fill the gap between 480 and 760 pixels - a missing range
// in the bootstrap responsive grid structure.  Use these classes to style pages
// on cellphones when they transition from portrait to landscape.
//
// Columns, offsets, pushes, and pulls for the ms device range, from phones
// to tablets.

%column_style {
  position: relative;
  // Prevent columns from collapsing when empty
  min-height: 1px;
  // Inner gutter via padding
  padding-left:  ($grid-gutter-width / 2);
  padding-right: ($grid-gutter-width / 2);
}

@for $i from 1 through $grid-columns {
  .col-ms-#{$i} {
    @extend %column_style
  }
}

// ----- col-ms breakpoints and related classes -----

@media (min-width: $screen-xs) {
  .container {
    @media (max-width: $screen-sm ) {
      max-width: $screen-sm - 20px;
    }
  }

  %float_left_style {
    float: left;
  }

  @for $i from 1 through $grid-columns {
    .col-ms-#{$i} {
      @extend %float_left_style
    }
  }

  @for $i from 1 through $grid-columns {
    @if ($i == $grid-columns) {
      .col-ms-#{$i} {
        width: 100%;
      }
    } @else {
      .col-ms-#{$i} {
        width: percentage(($i / $grid-columns));
      }
    }
  }

  // Push and pull columns for source order changes
  @for $i from 1 through $grid-columns - 1 {
    .col-ms-push-#{$i} {
      left: percentage(($i / $grid-columns));
    }

    .col-ms-pull-#{$i}  {
      right: percentage(($i / $grid-columns));
    }

    // Offsets
    .col-ms-offset-#{$i}  {
      margin-left: percentage(($i / $grid-columns));
    }
  }
}